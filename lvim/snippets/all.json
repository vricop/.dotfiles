{
  "React function component": {
    "prefix": ["fnc", "function component"],
    "body": [
      "export ${1:default }function ${2:${TM_FILENAME_BASE}}(${3: { ${4:children} \\} }) {",
      "  return (",
      "    $5",
      "  )",
      "}"
    ]
  },
  "Arrow function component": {
    "prefix": ["afnc", "Arrow function component"],
    "body": [
      "export const ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}} = (${2:{ children \\}}) => {",
      "  return ($0)",
      "}"
    ]
  },
  "Arrow function": {
    "prefix": ["afn"],
    "body": ["const ${1:functionName} = ($2) => {", "  $0", "}"]
  },
  "Async arrow function": {
    "prefix": ["aafn", "Async Arrow Function"],
    "body": ["const ${1:functionName} = async ($2) => {", "  $0", "}"]
  },
  "Function utility": {
    "prefix": ["fnu", "function utility"],
    "body": [
      "export default function ${1:${TM_FILENAME_BASE}}(${2:args}) {",
      "  ${3:/* code here */}",
      "}"
    ]
  },
  "console.{method}()": {
    "prefix": ["log", "console"],
    "body": "console.${1|log,dir,table,clear|}(${2:${TM_SELECTED_TEXT}})"
  },
  "Object destructuring": {
    "prefix": "...",
    "body": "const { $0 } = ${1}"
  },
  "Array destructuring": {
    "prefix": "...[]",
    "body": "const [ $0 ] = ${1}"
  },
  "useState": {
    "prefix": ["useState", "us"],
    "body": [
      "const [${1}, ${1/([a-z])(.*)/set${1:/upcase}${2}/}] = useState$5(${4:${3|'',null,undefined,false,true,[],{}|}})"
    ]
  },
  "useCallback": {
    "prefix": ["useCallback", "uc"],
    "body": [
      "const ${1:} = useCallBack$2(",
      "  () => {",
      "    $0",
      "  },",
      "  [$3]",
      ")"
    ]
  },
  "useMemo": {
    "prefix": ["useMemo", "um"],
    "body": [
      "const ${1:} = useMemo$2(",
      "  () => {",
      "    $0",
      "  },",
      "  [$3]",
      ")"
    ]
  },
  "useRef": {
    "prefix": ["useRef", "ur"],
    "body": ["const ${1:element} = useRef$3(${2:null})"]
  },
  "useEffect": {
    "prefix": ["useEffect", "ue"],
    "body": ["useEffect$2(() => {", "  $0", "}, [${1}])"]
  },
  "Conditional Component": {
    "prefix": ["cc", "conditional component"],
    "body": ["{${1:condition} && ${2:component}}"]
  },
  "Ternary Conditional Component": {
    "prefix": ["tcc", "ternary conditional component"],
    "body": [
      "{${1:condition} ? (",
      "  ${2:component1}",
      ") : (",
      "  ${3:component2}",
      ")"
    ]
  },
  "Custom Hook": {
    "prefix": ["Custom hook", "custom hook", "ch", "custom-hook", "use"],
    "body": [
      "import { useState } from 'react'",
      "",
      "export function ${TM_FILENAME_BASE}() {",
      "  ${1:const [${2}, set${2/(.*)/${1:/pascalcase}/}] = useState()",
      "",
      "  return [${2:state}, set${2/(.*)/${1:/pascalcase}/}]}",
      "}"
    ]
  },
  "Action types": {
    "prefix": ["Action types", "action-types", "action types", "at"],
    "body": [
      "export const ${TM_FILENAME_BASE} = {",
      "  ${1/(.*)/${1:/upcase}/}: '${1/(.*)/${1:/camelcase}/}'",
      "}"
    ]
  },
  "if": {
    "prefix": "if",
    "body": "if (${1:condition}) ${2:{$0\\}}"
  },
  "Reducer action type": {
    "prefix": ["action", "reducer action"],
    "body": "export const $1 = '${1/(.*)/${1:/camelcase}/}'"
  },
  "Reducer boilerplate": {
    "prefix": ["reducer"],
    "body": [
      "import { useReducer } from 'react'",
      "",
      "export const ACTIONS = {",
      "  ${1/(.*)/${1:/upcase}/g}: 'actionName',",
      "}",
      "",
      "const REDUCER_ACTIONS = {",
      "  [ACTIONS.${1/(.*)/${1:/upcase}/g}]: (state, { payload }) => ({}),",
      "}",
      "",
      "const reducer = (state, action) => {",
      "  const reducerAction = REDUCER_ACTIONS[action.type]",
      "  return reducerAction ? reducerAction(state, action) : state",
      "}",
      "",
      "export default function use${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}(initialState) {",
      "  const [state, dispatch] = useReducer(reducer, initialState)",
      "",
      "  ${3:// Functions to wrap the `dispatch`}",
      "",
      "  return {",
      "    state",
      "  }",
      "}"
    ]
  },
  "Custom provider boilerplate": {
    "prefix": ["provider", "custom provider"],
    "body": [
      "import { createContext, useContext } from 'react'",
      "",
      "const Context = createContext()",
      "const Provider = Context.Provider",
      "",
      "export const use${1:ContextName} = () => useContext(Context)",
      "",
      "export const ${2:ProviderName} = ({ children }) => {",
      "  return <Provider value={{ $3 }}>{children}</Provider>",
      "}"
    ]
  },
  "Const declaration statement": {
    "prefix": ["const"],
    "body": "const ${1:name} = $0"
  },
  "Let declaration statement": {
    "prefix": ["let"],
    "body": "let ${1:name} = $2"
  },
  "Var declaration statement": {
    "prefix": ["var"],
    "body": "const ${1:name} = $2"
  },
  "Ternary operator": {
    "prefix": ["ternary"],
    "body": "${1:true} ? $2 : $3"
  },
  "Object literal": {
    "prefix": ["object", "obj"],
    "body": ["const ${1:objectName} = {", "  $0", "}"]
  },
  "Array variable statement": {
    "prefix": ["array", "arr"],
    "body": ["const ${1:arrayName} = [$2]"]
  },
  "Function declaration statement": {
    "prefix": ["fn", "function"],
    "body": ["function $1($2) {", "  $0", "}"]
  },
  "Jest: describe": {
    "prefix": ["des", "describe", "dsc"],
    "body": [
      "describe('$1', ${2:async }() => {",
      "  it('$3', () => {",
      "    expect($3)",
      "  })",
      "})"
    ]
  },
  "Jest: it": {
    "prefix": ["it"],
    "body": ["it('$1', ${2:async }() => {", "  $3", "})"]
  },
  "Jest: expect": {
    "prefix": ["expect"],
    "body": ["expect($1)"]
  },
  "Imports": {
    "prefix": ["im", "import"],
    "body": "import ${2:{ $3 \\}} from '$1'"
  },
  "Exports": {
    "prefix": ["ex", "export"],
    "body": "export { ${1:ComponentName} } from '${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}'"
  },
  "CSS Reset": {
    "prefix": "reset",
    "body": [
      "/*",
      "  1. Use a more-intuitive box-sizing model.",
      "*/",
      "*, *::before, *::after {",
      "  box-sizing: border-box;",
      "}",
      "/*",
      "  2. Remove default margin",
      "*/",
      "* {",
      "  margin: 0;",
      "}",
      "/*",
      "  3. Allow percentage-based heights in the application",
      "*/",
      "html, body {",
      "  height: 100%;",
      "}",
      "/*",
      "  Typographic tweaks!",
      "  4. Add accessible line-height",
      "  5. Improve text rendering",
      "*/",
      "body {",
      "  line-height: 1.5;",
      "}",
      "/*",
      "  6. Improve media defaults",
      "*/",
      "img, picture, video, canvas {",
      "  display: block;",
      "  max-width: 100%;",
      "}",
      "/*",
      "  7. Remove built-in form typography styles",
      "*/",
      "input, button, textarea, select {",
      "  font: inherit;",
      "}",
      "/*",
      "  8. Avoid text overflows",
      "*/",
      "p, h1, h2, h3, h4, h5, h6 {",
      "  overflow-wrap: break-word;",
      "}",
      "/*",
      "  9. Create a root stacking context",
      "*/",
      "#root, #__next {",
      "  isolation: isolate;",
      "}"
    ]
  },
  "Styled component": {
    "prefix": "styled",
    "body": ["const ${1:ComponentName} = styled${4}.${2:div}`", "  $3", "`"]
  },
  "Styled component theme": {
    "prefix": "theme",
    "body": ["${({ theme }) => theme$1}"]
  },
  "t() function (i18n)": {
    "prefix": ["ut", "useTranslation", "translation"],
    "body": "const { t$1 } = useTranslation$2(${TM_SELECTED_TEXT:${3:ns}})"
  },
  "Inline Comment": {
    "prefix": "inline comment",
    "body": "/* ${TM_SELECTED_TEXT:$1} */"
  },
  "Block comment": {
    "prefix": ["bc", "block-comment"],
    "body": ["/**", " * ${TM_SELECTED_TEXT}", " */"]
  }
}
